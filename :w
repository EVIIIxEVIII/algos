#include <vector>

using namespace std;

class Solution {
    enum Ocean {
        NONE = 0,
        P = 1<<0, A = 1<<1, B = 0b11
    };

public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size(); int n = heights[0].size();
        vector<vector<Ocean>> dp(m, vector<Ocean>(n, NONE));
        vector<vector<int>> vis(m, vector<int>(n, false));
        vector<vector<int>> ans;


        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                dfs(i, j, heights, dp, ans, vis);
            }
        }

        return ans;
    }

    Ocean dfs(int i, int j, vector<vector<int>>& h, vector<vector<Ocean>>& dp, vector<vector<int>>& ans, vector<vector<int>>& vis) {
        int m = h.size(); int n = h[0].size();

        if (i <= 0|| j <= 0) return P;
        if (i >= m || j >= n) return A;

        if (vis[i][j] == 2) return dp[i][j];
        if (vis[i][j] == 1) return NONE;

        vis[i][j] = 1;

        Ocean l = NONE, r = NONE, b = NONE, u = NONE;

        if (j - 1 <= 0 || h[i][j-1] <= h[i][j]) {
            l = dfs(i, j-1, h, dp, ans, vis);
        }

        if (j + 1 >= n || h[i][j+1] <= h[i][j]) {
            r = dfs(i, j+1, h, dp, ans, vis);
        }

        if (i - 1 <= 0 || h[i-1][j] <= h[i][j]) {
            b = dfs(i-1, j, h, dp, ans, vis);
        }

        if (i + 1 >= m || h[i+1][j] <= h[i][j]) {
            u = dfs(i+1, j, h, dp, ans, vis);
        }

        Ocean local = (Ocean)(l | r | b | u);
        if (local == B) ans.push_back({i, j});

        dp[i][j] = local;
        return local;
    }
};
